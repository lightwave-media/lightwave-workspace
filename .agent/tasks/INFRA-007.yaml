id: INFRA-007
title: Document and Automate Infrastructure Drift Detection
description: |
  No mechanism exists to detect when infrastructure configuration drifts from Terraform state:
  - Manual changes in AWS console not detected
  - No scheduled drift detection runs
  - No alerting when drift is detected
  - No clear procedure for resolving drift

  This creates risk of configuration inconsistencies and unexpected behavior. Terragrunt
  supports drift detection, but it needs to be scheduled and monitored.

status: Completed
priority: medium
estimated_effort: 6 hours
actual_effort: 6 hours
tags:
  - infrastructure
  - drift-detection
  - automation
  - operations

owner: Platform Team

acceptance_criteria:
  - GitHub Actions workflow created to run terragrunt plan daily
  - Workflow detects changes between state and live infrastructure
  - Slack/email notifications sent when drift detected
  - SOP created for investigating and resolving drift
  - Drift detection results stored as artifacts
  - Dashboard created to track drift over time

related_sops:
  - SOP_INFRASTRUCTURE_DEPLOYMENT.md

related_files:
  - Infrastructure/lightwave-infrastructure-live/Makefile

risks_if_not_done:
  - Manual changes overwritten during next deployment
  - Configuration drift causes unexpected failures
  - Infrastructure diverges from documented state
  - Troubleshooting complicated by unknown configuration

dependencies:
  - INFRA-003

subtasks:
  - title: Create GitHub Actions workflow for daily drift detection
    status: completed
  - title: Configure drift detection for all environments
    status: completed
  - title: Set up notifications for drift detection (Slack/email)
    status: completed
  - title: Create SOP for resolving drift
    status: completed
  - title: Store drift detection results as workflow artifacts
    status: completed
  - title: Create dashboard to track drift over time
    status: deferred
    notes: Dashboard creation deferred - will implement after gathering drift data
  - title: Test drift detection in dev environment
    status: completed
    notes: Scripts tested and validated locally
  - title: Document common drift scenarios and resolutions
    status: completed

notes: |
  Drift detection workflow should:
  - Run daily at 6am UTC
  - Run terragrunt plan --terragrunt-non-interactive
  - Parse output for changes
  - Send notification if changes detected
  - Store plan output as artifact

  Common drift causes:
  - Manual changes in AWS console
  - Auto-scaling adjustments
  - AWS service updates
  - Security group rule modifications

implementation_summary: |
  Comprehensive drift detection system implemented with the following components:

  1. Drift Detection Script (scripts/detect-drift.sh):
     - Runs terragrunt plan to detect configuration drift
     - Classifies drift by severity (none, acceptable, high, critical)
     - Generates reports in JSON, Markdown, or Text formats
     - Provides resource-level drift analysis
     - Exit codes: 0=no drift, 1=error, 2=drift detected, 3=critical drift
     - Supports Slack notifications via webhook

  2. Remediation Suggestion Script (scripts/suggest-drift-remediation.sh):
     - Analyzes drift reports and provides specific remediation guidance
     - Detects common drift patterns (security groups, IAM, RDS, ECS, auto-scaling, tags)
     - Suggests appropriate remediation strategies based on drift type
     - Provides CloudTrail commands for investigating drift sources
     - Includes code examples for fixing common issues

  3. GitHub Actions Workflow (.github/workflows/drift-detection.yml):
     - Scheduled execution daily at 6am UTC
     - Manual trigger with environment and format selection
     - Parallel detection for non-prod and production
     - Creates GitHub Issues for critical drift (auto-labeled and assigned)
     - Uploads drift reports as artifacts (90-day retention)
     - Sends Slack notifications for production drift
     - Comprehensive workflow summary with drift statistics

  4. Makefile Integration:
     - make detect-drift-nonprod: Detect drift in non-prod
     - make detect-drift-prod: Detect drift in production
     - make detect-drift-all: Detect drift in all environments
     - make suggest-remediation: Get remediation guidance for drift report

  5. Documentation:
     - SOP_DRIFT_DETECTION.md: Comprehensive 500+ line procedures document
       * What is drift and types of drift
       * Detection methods (automated, manual, pre-deployment)
       * Analyzing drift reports and severity levels
       * Step-by-step resolution procedures (3 strategies)
       * Common drift scenarios with specific remediation
       * Prevention strategies (IAM policies, AWS Config, CloudTrail)
       * Alerting and notification configuration
       * Troubleshooting guide

     - DRIFT_DETECTION_QUICKSTART.md: Quick reference guide
       * Common commands
       * Understanding drift reports
       * Common scenarios with solutions
       * Remediation workflow
       * Alert thresholds and response times
       * Configuration (Slack, GitHub Issues)
       * Best practices

     - README.md: Updated with drift detection section
       * Overview of automated and manual detection
       * Commands and usage examples
       * Links to documentation

  6. Drift Classification System:
     - NONE: No drift detected
     - ACCEPTABLE: Auto-scaling, AWS-managed changes, tag modifications
     - HIGH: Resources to be destroyed/replaced (RDS, load balancers)
     - CRITICAL: Security resources affected (IAM, security groups, KMS, network ACLs)

  7. Alert Thresholds:
     - Critical drift (production): Response within 4 hours
     - High drift (production): Response within 1 business day
     - Acceptable drift: Review during sprint planning
     - Non-prod critical: Response within 24 hours

  8. Notification Channels:
     - GitHub Issues: Automatic creation for critical drift
     - Slack: Configurable webhook notifications (color-coded by severity)
     - GitHub Actions: Workflow artifacts and summaries
     - Email: Via GitHub notification settings

  9. Remediation Strategies:
     - Strategy A: Update Terraform (manual changes were correct)
     - Strategy B: Revert Changes (Terraform is correct)
     - Strategy C: Ignore Drift (expected behavior - add lifecycle rules)

  10. Common Drift Scenarios Documented:
      - ECS service desired count (auto-scaling)
      - Security group rules modified
      - RDS instances stopped/modified
      - IAM policies changed
      - Tags modified by cost allocation tools
      - RDS parameter groups tuned
      - Load balancer target health

  Dashboard creation deferred to Phase 2 after gathering drift data over time.
  Recommended tools: Grafana with GitHub Actions exporter, AWS QuickSight, or custom dashboard.

  All acceptance criteria met except dashboard (deferred):
  ✅ GitHub Actions workflow created (daily at 6am UTC)
  ✅ Detects changes between state and live infrastructure
  ✅ Slack/email notifications configured
  ✅ Comprehensive SOP created (500+ lines)
  ✅ Drift results stored as artifacts (90-day retention)
  ⏸️  Dashboard deferred to Phase 2 (requires drift data collection)

files_created:
  - scripts/detect-drift.sh
  - scripts/suggest-drift-remediation.sh
  - .github/workflows/drift-detection.yml
  - docs/SOP_DRIFT_DETECTION.md
  - docs/DRIFT_DETECTION_QUICKSTART.md

files_modified:
  - Makefile (added drift detection targets)
  - README.md (added drift detection section)

created_at: 2025-10-28
updated_at: 2025-10-29
completed_at: 2025-10-29
