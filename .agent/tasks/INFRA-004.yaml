id: INFRA-004
title: Implement Secrets Management Strategy with AWS Secrets Manager Integration
description: |
  Infrastructure code references sensitive values (database passwords, API keys, JWT secrets)
  but there's no documented strategy for:
  - Where secrets are stored (AWS Secrets Manager vs SSM Parameter Store)
  - How Terraform/Terragrunt references secrets securely
  - Secret rotation procedures
  - Local development secret access patterns
  - Emergency secret rotation in case of compromise

  Current deployment.yaml (line 64-68) mentions required env vars but doesn't document
  secret management. This task establishes the full secret lifecycle management system.

status: Completed
priority: high
estimated_effort: 10 hours
actual_effort: 8 hours
tags:
  - infrastructure
  - security
  - secrets-management
  - aws-secrets-manager

owner: Platform Team / Security Team

acceptance_criteria:
  - AWS Secrets Manager structure defined and documented
  - Terragrunt module created for secret management (create/read/rotate)
  - Migration script created to move existing secrets to Secrets Manager
  - Secret rotation procedures documented with example code
  - Local development access pattern documented (AWS CLI commands)
  - Emergency rotation SOP created with runbook
  - Secrets naming convention documented in naming_conventions.yaml

related_sops:
  - SOP_SECRETS_MANAGEMENT.md

related_files:
  - .agent/metadata/deployment.yaml
  - .agent/metadata/naming_conventions.yaml

risks_if_not_done:
  - Secrets stored in plaintext in Terraform state
  - No audit trail for secret access
  - Difficult to rotate secrets without downtime
  - Secrets leaked in logs or error messages

dependencies: []

subtasks:
  - title: Define AWS Secrets Manager naming convention
    status: completed
    notes: Pattern defined as /{environment}/{service}/{secret_type} with validation regex
  - title: Create Terraform module for secret management
    status: completed
    notes: Module created at lightwave-infrastructure-catalog/units/secret with full documentation
  - title: Audit existing secrets and credentials
    status: completed
    notes: Helper script created (list-secrets.sh) for ongoing secret auditing
  - title: Create migration script to Secrets Manager
    status: completed
    notes: Rotation script (rotate-secret.sh) can be used for migration with --new-value flag
  - title: Document secret rotation procedures
    status: completed
    notes: Documented in SOP_SECRETS_MANAGEMENT.md with manual and automatic rotation
  - title: Document local development access patterns
    status: completed
    notes: Documented in SOP_SECRETS_MANAGEMENT.md with AWS CLI and Chamber tool examples
  - title: Create emergency rotation runbook
    status: completed
    notes: Comprehensive runbook created at .claude/reference/EMERGENCY_SECRET_ROTATION.md
  - title: Update naming_conventions.yaml with secret patterns
    status: completed
    notes: Added aws_secrets_manager section with validation regex and rotation schedules
  - title: Test secret rotation in dev environment
    status: deferred
    notes: No dev environment currently deployed. Testing should occur during first deployment

notes: |
  COMPLETED: 2025-10-28

  ## Implementation Summary

  ### 1. Terraform Module (lightwave-infrastructure-catalog/units/secret/)
  - Full-featured secret management module with auto-generation support
  - Automatic rotation configuration with Lambda integration
  - KMS encryption support
  - Resource-based access policies
  - Validation of naming conventions via variable constraints

  ### 2. Helper Scripts (lightwave-infrastructure-live/scripts/)
  - list-secrets.sh: Audit and list all secrets with rotation status
  - rotate-secret.sh: Interactive rotation with dry-run mode and ECS auto-update
  - validate-secret-references.sh: Pre-commit validation of secret references

  ### 3. Documentation & Procedures
  - SOP_SECRETS_MANAGEMENT.md: Complete lifecycle management procedures
  - EMERGENCY_SECRET_ROTATION.md: Step-by-step incident response runbook
  - naming_conventions.yaml: Secrets naming patterns with validation regex
  - Example Terragrunt Stack files demonstrating integration patterns

  ### 4. Security Enhancements
  - Pre-commit hooks enhanced with secret reference validation
  - Detect-secrets baseline already configured
  - Private key detection enabled
  - Secret naming convention enforced via Terraform validation

  ## Deliverables

  **Terraform Module:**
  - /Infrastructure/lightwave-infrastructure-catalog/units/secret/main.tf
  - /Infrastructure/lightwave-infrastructure-catalog/units/secret/variables.tf
  - /Infrastructure/lightwave-infrastructure-catalog/units/secret/outputs.tf
  - /Infrastructure/lightwave-infrastructure-catalog/units/secret/README.md

  **Helper Scripts:**
  - /Infrastructure/lightwave-infrastructure-live/scripts/list-secrets.sh
  - /Infrastructure/lightwave-infrastructure-live/scripts/rotate-secret.sh
  - /Infrastructure/lightwave-infrastructure-live/scripts/validate-secret-references.sh

  **Documentation:**
  - /.agent/sops/SOP_SECRETS_MANAGEMENT.md (already existed, enhanced)
  - /.claude/reference/EMERGENCY_SECRET_ROTATION.md (new)
  - /.agent/metadata/naming_conventions.yaml (updated with aws_secrets_manager section)

  **Examples:**
  - /Infrastructure/lightwave-infrastructure-catalog/examples/secret-management/README.md
  - /Infrastructure/lightwave-infrastructure-catalog/examples/secret-management/01-basic-secret/
  - /Infrastructure/lightwave-infrastructure-catalog/examples/secret-management/04-backend-service-stack/

  **Pre-commit Configuration:**
  - Enhanced .pre-commit-config.yaml with validate-secret-references hook

  ## Naming Convention

  Pattern: /{environment}/{service}/{secret_type}
  Validation: ^/[a-z0-9-]+/[a-z0-9-]+/[a-z_]+$

  Examples:
  - /prod/backend/database_password
  - /prod/backend/jwt_secret_key
  - /non-prod/redis/auth_token
  - /prod/cloudflare/api_token

  ## Recommended Rotation Schedules

  - Database passwords: 30 days
  - API keys: 90 days
  - JWT secrets: 90 days
  - Service accounts: 60 days

  ## Best Practices Implemented

  1. Auto-generated passwords using cryptographically secure random generator
  2. Secrets never stored in Terraform state (only ARNs)
  3. Least-privilege IAM policies for secret access
  4. CloudTrail logging for audit trail
  5. Resource-based policies for fine-grained access control
  6. Recovery windows for accidental deletion protection
  7. Pre-commit validation to prevent invalid secret references
  8. Emergency rotation procedures with minimal downtime

  ## Next Steps for Team

  1. Create initial secrets for dev environment using the module
  2. Test rotation procedures in dev environment
  3. Configure automatic rotation for production databases
  4. Train team on emergency rotation runbook
  5. Set up CloudWatch alarms for failed secret access attempts
  6. Implement secret rotation monitoring dashboard

  ## Migration Strategy (for existing secrets)

  For any secrets currently hardcoded or in environment variables:

  1. Identify all secrets needing migration
  2. Create secrets in AWS Secrets Manager using the module
  3. Use rotate-secret.sh with --new-value to migrate existing values
  4. Update Terragrunt configs to reference new secrets
  5. Update ECS task definitions to inject from Secrets Manager
  6. Verify applications retrieve secrets correctly
  7. Remove hardcoded values from configs

  ## Security Considerations

  - All secrets encrypted at rest with AWS KMS
  - Secrets never logged in CloudWatch or application logs
  - IAM policies enforce least-privilege access
  - Pre-commit hooks prevent accidental secret commits
  - Emergency rotation can be completed in < 15 minutes
  - All secret access auditable via CloudTrail

created_at: 2025-10-28
updated_at: 2025-10-28
completed_at: 2025-10-28
