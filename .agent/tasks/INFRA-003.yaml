id: INFRA-003
title: Create Infrastructure CI/CD Pipeline with Automated Plan/Apply
description: |
  Currently, infrastructure deployments rely on manual execution via Makefile. There's no
  GitHub Actions workflow for infrastructure changes, meaning:
  - No automated terragrunt plan on PRs (engineers can't see changes before merge)
  - No automated terragrunt apply on merge to main
  - No deployment approval gates
  - No infrastructure test environment for validating changes

  This task creates a full CI/CD pipeline following Gruntwork best practices:
  - PR: Run terragrunt plan, post plan output as comment
  - Merge to main: Run terragrunt apply with approval gate for prod
  - Separate workflows for non-prod (auto-apply) vs prod (manual approval)
  - Integration with AWS OIDC for secure credential management

status: Completed
priority: high
estimated_effort: 12 hours
actual_effort: 10 hours
tags:
  - infrastructure
  - ci-cd
  - github-actions
  - automation

owner: Platform Team

acceptance_criteria:
  - ✅ GitHub Actions workflow created .github/workflows/terragrunt-plan.yml
  - ✅ GitHub Actions workflow created .github/workflows/terragrunt-apply.yml
  - ✅ AWS OIDC provider configuration documented and automated
  - ✅ Plan output posted as PR comment with formatted diff
  - ✅ Production deployments require manual approval
  - ✅ Non-prod deployments auto-apply after plan approval
  - ⚠️  Workflow tested with sample infrastructure change (requires AWS setup first)

related_sops:
  - SOP_INFRASTRUCTURE_DEPLOYMENT.md

related_files:
  - .github/workflows/terragrunt-plan.yml
  - .github/workflows/terragrunt-apply.yml
  - docs/GITHUB_ACTIONS_SETUP.md
  - scripts/setup-github-oidc.sh

risks_if_not_done:
  - No visibility into infrastructure changes before deployment
  - Accidental production deployments without review
  - Longer deployment cycles due to manual process
  - Inconsistent deployment procedures across team

dependencies:
  - INFRA-002

subtasks:
  - title: Configure AWS OIDC provider for GitHub Actions
    status: completed
    notes: Automated script created and documented
  - title: Create IAM role for GitHub Actions with least privilege
    status: completed
    notes: Least-privilege policy created with specific resource patterns
  - title: Create terragrunt-plan.yml workflow
    status: completed
    notes: Includes change detection, parallel planning, and PR comments
  - title: Create terragrunt-apply.yml workflow
    status: completed
    notes: Auto-apply for non-prod, manual approval for prod
  - title: Implement plan output formatting and PR comments
    status: completed
    notes: Uses github-script action to post/update PR comments
  - title: Add manual approval gate for production deployments
    status: completed
    notes: Uses GitHub Environments for manual approval workflow
  - title: Configure auto-apply for non-prod environments
    status: completed
    notes: 30-second wait timer before auto-apply
  - title: Test workflow with sample infrastructure change
    status: pending
    notes: Requires AWS OIDC setup to be run first
  - title: Document workflow in README.md
    status: completed
    notes: Comprehensive setup guide created in docs/GITHUB_ACTIONS_SETUP.md

notes: |
  ## Implementation Summary

  ### Created Files:
  1. .github/workflows/terragrunt-plan.yml
     - Runs on pull requests
     - Detects changed environments (non-prod vs prod)
     - Verifies remote state health
     - Posts plan output as PR comments
     - Checks for dangerous operations in production

  2. .github/workflows/terragrunt-apply.yml
     - Runs on merge to main
     - Auto-applies non-prod (30s wait timer)
     - Requires manual approval for production
     - Backs up production state before changes
     - Runs smoke tests after deployment
     - Provides rollback instructions on failure

  3. docs/GITHUB_ACTIONS_SETUP.md
     - Complete setup guide for AWS OIDC
     - Step-by-step IAM role creation
     - GitHub Environments configuration
     - Troubleshooting section
     - Security best practices

  4. scripts/setup-github-oidc.sh
     - Automated OIDC provider setup
     - IAM policy creation with least privilege
     - IAM role creation with trust policy
     - Idempotent (can be run multiple times)

  ### Key Features:
  - AWS OIDC authentication (no long-lived credentials)
  - Environment-aware deployment (auto vs manual approval)
  - Dangerous operation detection (destroys/replacements)
  - Remote state verification before operations
  - Parallel plan execution for changed environments
  - PR comment updates on new commits
  - Integration with existing scripts (verify-remote-state.sh, backup-prod-state.sh)
  - Comprehensive error handling and rollback instructions

  ### Security Considerations:
  - Least-privilege IAM policy with specific resource patterns
  - Repository-scoped OIDC trust policy
  - Short-lived session tokens (1 hour)
  - Separate environments for plan vs apply operations
  - Required reviewers for production deployments
  - Branch protection rules recommended

  ### Manual Steps Required:
  1. Run setup-github-oidc.sh script to create AWS resources
  2. Add AWS_GITHUB_ACTIONS_ROLE_ARN secret to GitHub
  3. Create GitHub Environments (non-prod-plan, non-prod, prod-plan, production)
  4. Configure branch protection on main branch
  5. Add required reviewers to production environment

  ### Testing Status:
  - YAML syntax validated: ✅
  - Workflow logic verified: ✅
  - AWS OIDC integration tested: ⚠️ Requires setup
  - End-to-end deployment tested: ⚠️ Requires setup

  ### Next Steps:
  1. Platform team to run setup-github-oidc.sh in AWS
  2. Configure GitHub repository settings
  3. Test with non-critical infrastructure change
  4. Monitor first few deployments closely
  5. Consider adding Infracost for cost estimation

  ### References:
  - GitHub OIDC with AWS: https://docs.github.com/en/actions/deployment/security-hardening-your-deployments/configuring-openid-connect-in-amazon-web-services
  - Terragrunt Stacks: https://terragrunt.gruntwork.io/docs/features/stacks/
  - Gruntwork Best Practices: https://gruntwork.io/guides/foundations/

created_at: 2025-10-28
updated_at: 2025-10-28
completed_at: 2025-10-28
