# Git Conventions - LightWave Media
# Purpose: Every branch, tag, and commit tells a story about WHAT, WHERE, and WHY
# Synced from: <NOTION_PAGE_URL>
# Last updated: <YYYY-MM-DD>

version: 1.0.0

# Notion Sync Configuration
notion_sync:
  source_database: "Global Documents DB"
  filters:
    - field: "Document Type"
      equals: "Git Convention"
    - field: "Status"
      equals: "Active"
    - field: "Agent Tags"
      contains: "agent:v_senior_developer"

  status_mapping:
    Active: "Claude Code follows these conventions"
    Draft: "Hidden (convention being discussed)"
    Deprecated: "Hidden (old convention, no longer used)"

  sync_frequency: "On task start, or manual trigger"
  last_synced: "<YYYY-MM-DD HH:MM:SS>"

philosophy: |
  Git metadata should be self-documenting:
  - Branch names reveal type, domain, and task
  - Tags namespace releases by feature/domain
  - Commits follow conventional commits for changelog automation
  - Every git object tells a story without needing external context

# Branch Naming Strategy
branches:
  pattern: "<type>/<domain>/<task-id>-<slug>"

  types:
    feat: "New feature or enhancement"
    fix: "Bug fix"
    chore: "Maintenance, deps, tooling"
    docs: "Documentation only"
    refactor: "Code restructuring without behavior change"
    test: "Test additions or fixes"

  domains:
    - "auth"
    - "cineos"
    - "photographos"
    - "createos"
    - "platform"
    - "infra"
    # Add more domains as needed

  task_id_format: "<Notion task ID or LINEAR-XXX or GitHub issue #>"

  examples:
    - branch: "feat/auth/LW-123-oauth-integration"
      story: "Adding OAuth feature to auth domain, tracked in Notion as LW-123"

    - branch: "fix/cineos/LW-456-video-player-crash"
      story: "Fixing video player bug in cineOS domain, Notion task LW-456"

    - branch: "chore/platform/update-django-deps"
      story: "Dependency update for platform (no specific task)"

  special_branches:
    main: "Production-ready code, auto-deploys"
    develop: "Integration branch (if using GitFlow)"
    staging: "Pre-production testing (if needed)"

# Tag Naming Strategy
tags:
  pattern: "v<major>.<minor>.<patch>[-<domain>][-<prerelease>]"

  versioning_scheme: "Semantic Versioning (semver)"

  examples:
    - tag: "v1.2.3"
      story: "Platform-wide release (all domains)"

    - tag: "v1.2.3-auth"
      story: "Auth domain-specific release in monorepo"

    - tag: "v2.0.0-beta.1"
      story: "Pre-release beta version"

  when_to_tag:
    rule: "<When do you create tags? Every deploy? Manual milestones?>"
    examples:
      - condition: "<CONDITION>"
        action: "<CREATE TAG or DON'T TAG>"

# Commit Message Strategy
commits:
  convention: "Conventional Commits"
  pattern: "<type>(<scope>): <subject>"

  types:
    feat: "New feature"
    fix: "Bug fix"
    docs: "Documentation"
    style: "Formatting, missing semicolons, etc."
    refactor: "Code change that neither fixes a bug nor adds a feature"
    test: "Adding tests"
    chore: "Maintain, deps, build process"

  scope_examples:
    - "auth"
    - "ui"
    - "api"
    - "deploy"
    - "deps"

  examples:
    - commit: "feat(auth): add OAuth2 provider support"
      story: "Added new feature to auth scope"

    - commit: "fix(cineos): resolve video player memory leak"
      story: "Fixed bug in cineos scope"

    - commit: "chore(deps): bump Django to 5.1"
      story: "Dependency update in deps scope"

  breaking_changes:
    pattern: "<type>(<scope>)!: <subject>"
    example: "feat(api)!: change auth endpoint response format"

  body_format: |
    <Optional detailed description>

    <Optional footer with references>
    Refs: LW-123, LW-456
    Co-authored-by: Name <email>

# Pull Request Strategy
pull_requests:
  title_pattern: "[<TYPE>] <Brief description>"

  examples:
    - title: "[FEAT] Add OAuth integration to auth client"
      story: "Feature PR, clearly labeled"

    - title: "[FIX] Resolve video player crash on iOS"
      story: "Bug fix PR"

  description_template: |
    ## Summary
    <What this PR does>

    ## Notion Task
    <Link to Notion task>

    ## Changes
    - <Change 1>
    - <Change 2>

    ## Testing
    - [ ] Unit tests added/updated
    - [ ] Integration tests pass
    - [ ] Manual testing completed

    ## Checklist
    - [ ] DoR verified
    - [ ] DoD verified
    - [ ] Breaking changes documented

  merge_strategy: "<merge|squash|rebase>"

# Workflow Integration
workflow:
  notion_integration:
    pattern: "<How do git branches link to Notion tasks?>"
    example: "<Branch name includes Notion ID, PR links to task>"

  deployment_triggers:
    main: "<What happens on merge to main?>"
    tags: "<What happens when a tag is created?>"

# Story-Driven Questions This Answers
answers:
  - question: "What is this branch working on?"
    answer: "Look at branch name: type + domain + task ID"

  - question: "When was feature X released?"
    answer: "Check git tags with domain suffix"

  - question: "What changed in this version?"
    answer: "Parse conventional commits for changelog"

  - question: "Which Notion task does this relate to?"
    answer: "Branch name contains task ID, PR description links task"

# Cross-reference
related:
  notion_workflow: ".agent/sops/SOP_NOTION_WORKFLOW.md"
  pr_checklist: ".claude/CHECKLISTS.md"
  deployment: ".agent/metadata/deployment.yaml"
